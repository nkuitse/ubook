#!/usr/bin/perl

use strict;
use warnings;

use Fcntl qw(:flock);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub fatal;
sub ask;
sub max(@);
sub cancelled;

my $book = $ENV{'UBOOK'} || '/var/local/ubook';
my $path = '/bin:/usr/bin';
my $interactive = -t 0;
my ($dryrun, %uproto, %user, %group);

my $prog = $0;
$prog =~ s{.+/}{};

usage if !@ARGV;

my $func = __PACKAGE__->can($prog) or usage;
$func->();

# --- Commands

sub udef {
    my ($opt_comment, $opt_home, $opt_shell);
    GetOptions(
        'r|root=s' => \$book,
        'n|dry-run' => \$dryrun,
        'c|comment=s' => \$opt_comment,
        'd|home=s' => \$opt_home,
        's|shell=s' => \$opt_shell,
    ) or usage;
    read_ubook();
    @ARGV == 1 || @ARGV == 2 || usage;
    my ($l, $p) = @ARGV;
    $p ||= choose_prototype();
    my ($login, $password, $uid, $gid, $comment, $home, $shell, @groups) = proto($p);
    fatal "No such prototype: $p" if !defined $login;
    # (1) Login
    if ($login =~ m{^%l\s*/\s*([^:/]+)/\s*$}) {
        my $pat = $1;
        fatal "Login must match /$pat/" if $l !~ $pat;
        $login = $l;
    }
    elsif ($login eq '%l') {
        $login = $l;
    }
    else {
        fatal "Invalid login spec: $login";
    }
    # (2) Password
    fatal "Invalid password: $password" if $password ne 'x';
    # (3) UID
    fatal "UID range not given: $uid" if $uid !~ /^(?:%u)?([\[(])(\d+),(\d+)([\]\)])$/;
    my ($uidmin, $uidmax) = ($2, $3);
    $uidmin++ if $1 eq '(';
    $uidmax-- if $4 eq ')';
    $uid = allocate_uid($uidmin, $uidmax);
    # (4) GID
    if ($gid eq '%u') {
        $gid = $uid;
    }
    elsif ($gid eq '%g') {
        $gid = '';
    }
    else {
        fatal "Invalid GID: $gid";
    }
    # (5) Comment
    if (defined $opt_comment) {
        $comment = $opt_comment;
    }
    elsif ($comment eq '%c') {
        $comment = '';
    }
    # (6) Home directory
    if (defined $opt_home) {
        $home = $opt_home;
    }
    elsif ($home =~ m{^%l\s*~\s*s/([^:/]+)/([^:/]*)/\s*$}) {
        my ($pat, $sub) = ($1, $2);
        $home = $l;
        $home =~ s/$pat/$sub/;
    }
    else {
        $home =~ s/%l/$l/g;
    }
    # (7) Shell
    if (defined $opt_shell) {
        $shell = $opt_shell;
    }
    elsif ($shell =~ m{^%s\s*\(([^:()]+)\)\s*$}) {
        $shell = find_shell($1);
    }
    ask \$login,   'Login:';
    ask \$uid,     'UID:  ';
    ask \$gid,     'GID:  ';
    ask \$comment, 'Name: ';
    ask \$home,    'Home: ';
    ask \$shell,   'Shell:';
    my $passwd = join(':', $login, 'x', $uid, $gid, $comment, $home, $shell, join(',', @groups));
    if ($dryrun) {
        print $passwd, "\n";
        exit 0;
    }
    open my $fh, '>>', 'users' or die;
    flock($fh, LOCK_EX) or die "Can't lock $book/users: $!";
    print $fh $passwd, "\n";
    flock($fh, LOCK_UN) or die "Can't unlock $book/users: $!";
    close $fh;
}

sub unew {
    my ($opt_comment, $opt_home, $opt_shell);
    GetOptions(
        'r|root=s' => \$book,
        'n|dry-run' => \$dryrun,
        'c|comment=s' => \$opt_comment,
        'd|home=s' => \$opt_home,
        's|shell=s' => \$opt_shell,
    ) or usage;
    chdir $book or fatal "Can't chdir $book: $!";
    my @commands;
    foreach my $login (@ARGV) {
        my ($login, $password, $uid, $gid, $comment, $home, $shell, @groups) = @{ user($login) || fatal "Undefined user: $login" };
        $comment = $opt_comment if defined $opt_comment;
        $home = $opt_home if defined $opt_home;
        $shell = $opt_shell if defined $opt_shell;
        my @cmd = (
            'useradd',
            '-u' => $uid,
            '-c' => $comment,
            '-d' => $home,
            '-m',
            '-s' => shell($shell),
        );
        if ($gid == $uid) {
            push @cmd, '-U';
        }
        else {
            my $group = group($gid) || fatal "No such group: $gid";
            push @cmd, '-g' => $gid;
        }
        push @cmd, '-G' => join(',', @groups) if @groups;
        if ($dryrun) {
            print join(' ', map { quote($_) } @cmd), "\n";
        }
        else {
            system(@cmd);
        }
    }
}

sub ubook {
    # XXX List users and groups, flagging ones that are in use on this host
    fatal "Not implemented yet";
}

# --- Other functions

sub choose_prototype {
    proto();
    my @protos = sort keys %proto;
    fatal "There are no prototypes to choose from" if !@protos;
    my $i = 0;
    my $w = max map { length $_ } @protos;
    print STDERR "Prototypes defined:\n";
    foreach (@protos) {
        printf STDERR "  %2d) %-${w}.${w}s\n", ++$i, $_;
    }
    while (1) {
        print STDERR "Choose one: ";
        my $p = <STDIN>;
        cancelled if !defined $p;
        chomp $p;
        cancelled if !length $p;
        return $protos[$p-1]
            if $p =~ /^[1-9]\d*$/ && $p <= scalar @protos;
    }
}

sub user {
    my ($u) = @_;
    open my $fh, '<', 'users' or die "Can't open users: $!";
    while (<$fh>) {
        next if /^\s*(#.*)?$/ || !/^${u}:/;
        chomp;
        my @fields = split /:/;
        die "Invalid user $_" if @fields < 7 || @fields > 8;
        return \@fields if $fields[0] eq $u;
    }
    fatal "Undefined user: $u";
}

sub shell {
    my ($s) = @_;
    return $s if $s =~ m{^/};
    open my $fh, '<', '/etc/shells' or die;
    while (<$fh>) {
        next if /^\s*(#.*)?$/;
        chomp;
        return $_ if m{.+/$s$};
    }
    fatal "Not in /etc/shells: $s";
}

sub proto {
    my ($p) = @_;
    return @{ $proto{$p} } if defined $p && defined $proto{$p};
    open my $fh, '<', 'prototypes' or die;
    while (<$fh>) {
        next if /^\s*(#.*)?$/;  # Skip blank lines and comments
        chomp;
        my ($pread, @fields) = map { trim($_) } split /(?<=\s):(?=\s)/;
        die "Invalid prototype: $_" if @fields < 7 || @fields > 8;
        $proto{$pread} = \@fields;
    }
    close $fh;
    return if !defined $p || !defined $proto{$p};
    return @{ $proto{$p} };
}

sub ask {
    my ($ref, $prompt) = @_;
    return $$ref if !$interactive && defined $$ref;
    print STDERR $prompt, ' ';
    print STDERR "[$$ref] " if defined $$ref;
    my $ans = <STDIN>;
    return if !defined $ans;
    chomp $ans;
    return defined $$ref if !length $ans;
    $$ref = $ans;
    return 1;
}

sub trim {
    local $_ = shift;
    s/^\s+|\s+$//g;
    return $_;
}

sub allocate_uid {
    my ($min, $max) = @_;
    open my $fh, '<', 'users' or die;
    my %alloc;
    while (<$fh>) {
        if (/^[^:]+:[^:]+:(\d+):/ && $1 >= $min && $1 <= $max) {
            $alloc{$1} = 1;
        }
    }
    close $fh;
    foreach ($min .. $max) {
        return $_ if !$alloc{$_};
    }
    fatal "Can't allocate a UID in range [$min, $max]";
}

sub quote {
    local $_ = shift;
    if (/"/) {
        return q{'} . $_ . q{'};
    }
    elsif (/['\s]/) {
        return q{"} . $_ . q{"};
    }
    else {
        return $_;
    }
}

sub fatal {
    print STDERR $_, "\n" for @_;
    exit 2;
}

sub max(@) {
    my $m = 0;
    foreach (@_) {
        $m = $_ if $_ > $m;
    }
    return $m;
}

sub cancelled { print STDERR "cancelled\n"; exit -1 }

sub read_ubook {
    open my $fh, '<', $book or die "Can't open $ubook: $!";
    while (<$fh>) {
        next if /^\s*(#.*)?$/;  # Skip blank lines and comments
        chomp;
        if (/^proto\s+user\s+(\w+)\s+{(.+)}(.*)$/) {
            $uproto{$1} = [ user_spec($2, $3) ];
        }
        elsif (/^user\s+{(.+)}(.*)$/) {
            my ($l, @spec) = user_spec($1, $2);
            $user{$l} = [ $l, @spec ];
        }
        elsif (/^group\s+{(.+)}(.*)$/) {
            my ($n, @spec) = group_spec($1, $2);
            $group{$n} = [ $n, @spec ];
        }
        else {
            fatal "Unrecognized line in $ubook: $_";
        }
    }
}

sub user_spec {
    my ($body, $mod) = @_;
    my @groups;
    my @parts = map { trim($_) } split /:/, $body;
    fatal "Invalid user prototype body: $body" if @parts != 7;
    if ($mod =~ s/^\s+in\s+groups?\s+(.+)//) {
        @groups = map { trim($_) } split /,\s*/, $1;
        fatal "Unrecognized user prototype modifier: $mod" if length $mod;
    }
    return [ @parts, @groups ];
}

